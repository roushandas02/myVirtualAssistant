import genToken from "../config/token.js";
import User from "../models/user.model.js";
import bcrypt from "bcryptjs";

export const signUp=async (req,res)=>{
    try {
        //Get Name Email and Password from request body
        const {name,email,password}=req.body;
        console.log(name,email,password);

        //firstly check for already present email
        const emailExist=await User.findOne({email});
        if(emailExist){
            return res.status(400).json({message:"Email already exists!"})
        }
        //secondly check for the length of password
        if(password.length<6){
            return res.status(400).json({message:"Password must be atleast 6 character!"})
        }
        // if both condition satisfied, proceed with password hashing via bcryptjs
        const hashedPassword= await bcrypt.hash(password, 10);

        //Now successfully create the user using User model
        const user=await User.create({
            name,
            email,
            password: hashedPassword
        })
        
        //Now we need to generate token by genToken function in token.js which takes userId as input
        //we give the unique user id here which is by default generated by mongo db for each user entry
        const token=await genToken(user._id);
        
        //Now store that token in a cookie to automatically keep logged in user next time till 7 days
        //res.cookie(name,token,optional)
        res.cookie("token",token,{
            httpOnly:true,
            secure: true,
            sameSite: "None",
            maxAge: 7 * 24 * 60 * 60 * 1000
            // maxAge: 7*24*60*60*1000 //By default the cookie remains till the browser is closed if the maxAge is not defined (1 session)
        })

        return res.status(201).json(user);



    } catch (error) {
        return res.status(500).json({message:`Signup Error ${error}`});
    }
}


export const logIn=async (req,res)=>{
    try {
        //Get Email and Password from request body
        const {email,password}=req.body;

        //find the user by its email
        const user=await User.findOne({email});
        if(!user){
            return res.status(400).json({message:"Email do not exist!"})
        }
        //Now we check for the password
        const isMatch=await bcrypt.compare(password, user.password);

        if(!isMatch){
            return res.status(400).json({message:"Incorrect Password!"})
        }
        
        
        //Now we need to generate token by genToken function in token.js which takes userId as input
        //we give the unique user id here which is by default generated by mongo db for each user entry
        const token=await genToken(user._id);
        
        //Now store that token in a cookie to automatically keep logged in user next time till 7 days
        //res.cookie(name,token,optional)
        res.cookie("token",token,{
            httpOnly:true,
            maxAge: 7*24*60*60*1000
        })

        return res.status(201).json(user);



    } catch (error) {
        return res.status(500).json({message:`Login Error ${error}`});
    }
}


export const logOut=async (req,res)=>{
    try {

        res.clearCookie("token");
        return res.status(200).json({message:"Logged out Successfully"});

    } catch (error) {
        return res.status(500).json({message:`Logout Error ${error}`});
    }
}
